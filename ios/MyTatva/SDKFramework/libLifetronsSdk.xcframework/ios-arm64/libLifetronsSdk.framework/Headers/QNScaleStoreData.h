//
//  QNScaleStoreData.h
//  QNDeviceSDK
//
//  Created by Lifetrons Software Pvt. Ltd on 2018/1/9.
//  Copyright © 2023 Lifetrons Software Pvt. Ltd. All rights reserved.
//

#import <Foundation/Foundation.h>
#import "QNUser.h"
#import "QNScaleData.h"

/**
 This class is for storing data on the scale
 
 The stored data is called back through the data agent (QNScaleDataProtocol) "- (void)onGetStoredScale:(QNBleDevice *)device data:(NSArray <QNScaleStoreData *> *)storedDataList"
 
 
 Description of the generation of stored data:
 When the scale is not connected, the scale will automatically store the data to the scale. When the scale is connected next time, the SDK will automatically read all the stored data on the scale (when the stored data is read, the scale will All stored data will be erased), as long as the device is connected, regardless of whether the measurement is started, the SDK will first determine whether there is stored data in the scale, and if there is data, it will first read the stored data and return
 The behavior of storing data is generated by the user and cannot be controlled by the SDK. When the merchant can choose whether to process the stored data (regardless of whether the merchant processes the stored data, the SDK will read the stored data and return it. The merchant only needs to determine whether the data needs to be stored)
 
 
 Processing instructions for stored data:
 1. No need to process stored data:
 If you don’t need to accept stored data, you don’t need to implement the "- (void)onGetStoredScale:(QNBleDevice *)device data:(NSArray <QNScaleStoreData *> *)storedDataList" method, or the implementation method does not do any processing
 
 2. Need to be in a situation where data is stored:
 
 Since the scale is used by multiple people, the stored data in a scale may be the data of multiple people. The SDK will leave the processing of the stored data to the merchant to flexibly determine which user the stored data belongs to.
 
 You must determine which user the piece of stored data belongs to in order to obtain the detailed information of the stored data (see the method call description below)
 
 */

@interface QNScaleStoreData: NSObject

/** Weight value of stored data */
@property (nonatomic, readonly, assign) double weight;

/** The measurement time of the stored data */
@property (nonatomic, readonly, strong) NSDate *measureTime;

/** The mac address of the scale to which the data is stored */
@property (nonatomic, readonly, strong) NSString *mac;

/** Is the data complete */
@property (nonatomic, readonly, assign) BOOL isDataComplete;

/** Height (exclusive for height and weight scale) */
@property (nonatomic, assign, readonly) double height;

/** Related encrypted string */
@property (nonatomic, readonly, strong) NSString *hmac;

-(instancetype)init NS_UNAVAILABLE;

/**
 Set the owner of the stored data
 
 @param user QNUser
 */
-(BOOL)setUser:(QNUser *)user;

/**
 Get measurement data details
 
 You must call "- (void)setUser:(QNUser *)user" to determine the owner of the stored data to get the measurement data details
 
 @return QNScaleData
 */
-(QNScaleData *)generateScaleData;


/**
 Build storage data objects
 
 Used to obtain unknown measurement data of WiFi Bluetooth dual-mode devices from Qingniu Cloud to construct objects
 
 @param weight weight in KG
 @param measureTime measure time
 @param mac measured scale mac address
 @param hmac related encrypted string
 @param callback Construct structure callback
 @return QNScaleStoreData
 */
+ (QNScaleStoreData *)buildStoreDataWithWeight:(double)weight measureTime:(NSDate *)measureTime mac:(NSString *)mac hmac:(NSString *)hmac callBlock:(QNResultCallback)callback;

@end
